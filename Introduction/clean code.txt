- Ogni funzione deve essere preceduta da un commento che ne descrive l’obiettivo

- Ogni funzione/variabile deve avere un nome significativo e non ambiguo (Auto documenta il codice)

- Prestare particolare attenzione alle indentazioni in moo tale da rendere il codice più fluido e chiaro possibile

- Inserire un commento all'inizio e alla fine di ogni funzione, nel primo dichiariamo il funzionamento, nell'ultimo la fine della funzione/blocco di codice

- Dichiarare le costanti in MAIUSCOLO e le variabili locali in minuscolo, USA IL CAMEL CASE (numeroOperazioni)

- Lasciare uno SPAZIO dopo la ', ' per rendere il codice più leggibile

- Lasciare uno SPAZIO da entrami i lati degli operatori matematici/lamda, tranne tra seguenti operatori (==, !=,  >=, <=, =>) è un errore di sintassi

- OIPL: Un istruzione per riga, (NO: int a; a = 10;)

- In un blocco d'istruzioni con la stessa indentazione, inserire un a capo sensato per separare le varie istruzioni

- Non utilizzare: parole chiave, numeri, caratteri speciali o caratteri accentati per nominare le variabili

- Ridurre le funzioni troppo grandi in sottofunzioni

- Inserire 2 a capo tra le diverse funzioni e le variabili globali

- Il nome di una classe nn deve essere un verbo

- Il nome delle funzioni devo essere dei verbi e riferirsi ai dati con cui operano, utilizzando lo standard del Javabean

- Rendere i costruttori privati e utilizzare una funzione costruttiva al posto di new Costruttore

- LE FUNZIONI DEVONO FARE UNA COSA SOLA, DEVONO FARLA BENE, E NON DEVONO FARE ALTRO

- Non confondere dominio del problema col dominio di programmazione

- Non fare gli spiritosi nel nominare le variabili

- Costruite contesti per le variabili (classi) per non confondersi

- Funzioni brevi di MAX 5 righe, il segreto sta nel dividere le funzioni nei diversi livelli di astrazione delle operazioni

- Creare funzioni niladiche (nessun parametro) o monadiche (1 parametro) evitare triadica e poliadica

- No alle funzioni con flag come parametri

- Trasformare le triadi in oggetti dove possibile

- Usare eccezioni al posto di codici di errore

- Estrarre i blocchi try/catch dal codice, utilizzando delle funzioni per l'elaborazione dati e una funzione che gestisce gli errori

- Principio DRY (Don't Repeat Yourself) non fare copia e incolla di parte di codice

- Nessuno è in grado di scrivere codice pulito a nella prima bozza. Le funzioni vanno riviste e ottimizzate una volta concluse

- Commento di apertura/chiusura di funzione sono se sono lunghe e annidate

- Le funzioni che lavorano insieme bisogna metterle vicine per migliorare la leggibilità

- Inserire le variabili locali sempre in cima alla funzione

- Le funzioni chiamanti si trovano al di sopra di quelle chiamate (l'opposto di C, C++, Pascal)

- Usate solo lettere maiuscole per i nomi di costanti simboliche. Questo evidenzia tali costanti in un programma

- Nei nomi di costanti simboliche formati da più parole, separate le parole con sottolineature per favorirne la leggibilità

- Quando passate un array a una funzione, passate anche la dimensione dell’array. Questo contribuisce a rendere la funzione riutilizzabile in molti programmi.

- eliminare i commenti di vecchi pezzi di codice non utilizzate

- evitare di usare i commenti per indicare metadati del file come proprietario, desc,...

- EVITARE COME LA PESTE I COMMENTI CHE DESCRIVONO UN QUALCOSA CHE E' GIA' AUTODESCRITTIVO sono ridondanti

- Un commento o lo inseirsci e gli dedichi il giusto tempo per far sì che sia ben fatto altrimenti è meglio evitare
 perché confonde solo le idee

- I test devono essere eseguiti tutti con un solo comando, meglio ancora se vengono lanciati tutti i test facendo click su un solo pulsante dell'IDE 

- Una funzione deve avere AL MASSIMO 3 ARGOMENTI, meno argomenti vengono passati megliore è la qualità della funzione

- Variabili booleane come parametri == RED FLAG == la funzione fa più di una cosa.

- Funzioni che non vengono mai richiamate dovrebbero essere eliminte perchè mantenerle è confuzionario e uno spreco.

- Più linguaggi in un file sorgene == confuzione

- DRY Don't Repeat Yourself, se una funzione è già presente perchè dobbiamo crearne un'altra? UNA E buona
  OGNI VOLTA CHE VEDETE DELLE DUPLICAZIONI DI CODICE AVETE TROVATO UNA MANCATA OPPORTUNITA' DI ASTRAZIONE

- variabili e funzioni vanno dichiarate vicino al loro utilizzo. Una funzione che utilizza al suo interno altre funzioni si dovrebbe trovare al di sotto della dichiarazione delle funzioni che utilizza.

-

Linee guida per C:

- ! Usare la puts per la stampa a video senza parametri e la printf per la stampa a video con parametri (la printf può generare vulnerabilità)

- Le righe col carattere '#' (include) vengono elaborate prima dalla CPU, nella seconda fase

- !!! Per la gestione dei calcoli monetari utilizzare il tipo INT non Float/Double, perchè l'approssimazione/operazioni matematiche approssimano i centesimi

- Le operazioni continue e break sono più performanti dei flag nei cicli

- Nelle espressioni che usano l’operatore &&, fate in modo che la condizione con maggiori probabilità di essere falsa sia quella più a sinistra. Nelle espressioni che usano l’operatore || fate
  in modo che la condizione con maggiori probabilità di essere vera sia quella più a sinistra. Questo può ridurre il tempo di esecuzione di un programma.

- Specificare parametri di funzione dello stesso tipo come double x, y invece di double x, double y genera un errore di compilazione

- Ridefinire un parametro come variabile locale in una funzione genera un errore di compilazione

- Assegnare un valore a una costante di enumerazione dopo che è stata definita è un errore di sintassi

- Usate solo lettere maiuscole nei nomi delle costanti di enumerazione per far sì che queste costanti risaltino in un programma e per indicare che non sono delle variabili

- Definire una variabile globale invece che locale permette che si verifichino effetti secondari non voluti quando una funzione che non ha necessità di accedere alla variabile la modifica accidentalmente o intenzionalmente

- Inizializza sempre un array a {0} per evitare letture sporche

- Definire la dimensione degli array con costanti simboliche rende i programmi più modificabili

- Nel passaggio di un array a una funzione, includere come secondo parametro la lunghezza dell'array

- Inizializzare i puntatori a NULL (<stdio.h>) o a 0

- Principio del privilegio minimo: date sempre a una funzione un accesso ai dati nei suoi parametri sufficiente per portare a termine il suo compito
  specifico, ma assolutamente null’altro

- Quando passate a funzioni oggetti di grandi dimensioni, come le strutture, utilizzate puntatori
  a dati costanti in modo da ottenere i benefici in termini di prestazioni del passaggio per riferimento e la sicurezza del passaggio per valore.

- Mettere i prototipi di funzione nelle definizioni di altre funzioni è un’applicazione del principio
  del privilegio minimo, perché ciò limita le chiamate appropriate di una funzione alle funzioni
  in cui compaiono i prototipi

- Far riferimento a un valore per mezzo di un puntatore si dice indirezione

- L’operatore di indirezione *, comunemente detto operatore di dereferenziazione, restituisce il valore dell’oggetto al quale punta il suo operando (operazione di dereferenzazione)

- L’operatore d'indirizzo & è un operatore unario che restituisce l’indirizzo del suo operando

- Un puntatore void * non può essere dereferenziato

- Se il parametro di una funzione punta a un valore che non verrà cambiato dalla funzione, si deve usare const per indicare che i dati sono costanti

- Libreria trattamento caratteri <ctype.h>

- Libreria conversione stringhe <stdlib.h>

- Libreria gestione I/O stringhe <stdio.h>

- Specifiche di conversione sono composte da: flag (indicatori), larghezze di campo, precisioni, caratteri letterali e %

- Virgolette "" e apici '' sono differenti in C, perchè mentre le prime alla stringa racchiusa aggiunge anche il carattere \0 gli apici non lo fanno
  perciò vengono usati per i caratteri singoli

- L'operatore di membro di struttura (.), chiamato anche operatore punto

- Il comando typedef viene utilizzato per assegnare un nuovo nome ad un tipo di dato esistente. Ad esempio, si può usare
typedef per creare un sinonimo per un tipo di dato complesso, come ad esempio una struttura o un union.

- i dati contenuti in una union vengono sovrascritti ad ogni modifica

- La tilde in C effettua il complemento a 1 bit per bit

- La parola chiave enum crea delle costati di enumerazione rappresentate da identificatori. I valori tipicamente partono da 0 a meno che
    non vega specificato diversamente nella dichiarazione.

- Le costanti di enumerazione non sono variabili e buona pratica scrivele in stampatello per confonderle con le variabili normali

- Strutture e union devono essere nominate con la prima lettera maiuscola (come la OOP) per differenziare questi tipi di dati dalle variabili

- Quando si apre un file, esso viene associato a uno stream.

- Quando si esegue un programma si aprono 3 stream: standard input, standard output, standard error

- La funzione fclose riceve come argomento il puntatore a file non il nome del file

- Modalità di apertura file:
    lettura se esiste (r)
    scrittura se esiste (w)
    aggiunta se esiste (a)
    lettura e scrittura (r+)
    scrittura se esiste elimina ciò che c'è già dentro altrimenti crea uno nuovo(w+)
    apre e aggiunge altrimenti crea uno nuovo (a+)
    lettura file esistente in forma binaria (rb)
    scrittura file esistente in forma binaria (wb)
    aggiunta file esistente in forma binaria (ab)
    lettura e scrittura in forma binaria (rb+)
    scrittura se esiste altrimenti crea in forma binaria (wb+)
    aggiungi se esiste altrimenti crea in forma binaria (ab+)
    SICUREZZA FILE
    wx, wx+, wbx, wbx+, sono modalità di apertura file in scrittura che garantiscono l'esclusività. In queste modalità
    fopen fallirà se il file esiste già o non può essere creato.
    Nel caso in cui venga creato il file, il SO garantisce l'esclusività di scrittura sul file solamente al nostro processo finchè è aperto.

- La funzione rewind prende come argomento il puntatore al file e ci permette di "riavvolgere la bobina"

- Nel codice a livello industriale si preferisce utilizzare fseek(filePtr, 0, SEEEK_SET) piuttosto che la funzione rewind, questo perchè
    quest'ultima non ritorna alcun valore in caso di errore mentre la prima ritornerà un intero != 0

- Per via di differenze nelle rappresentazioni di dati binari su diverse piattaforme, spesso i file scritti in formato binario non sono portabili.

- Alcune funzioni di libreria non operano in maniera identica sui file di testo e sui file binari.
    In particolare, non si è sicuri che la funzione fseek lavori correttamente con i file binari se si specifica SEEK_END, pertanto è preferibile usare SEEK_SET.

- Occorre sempre chiudere un file non appena esso non è più necessario per il proprio programma.

- La funzione malloc viene usata normalmente con l’operatore sizeof. Ad esempio, l’istruzione: newPtr = malloc(sizeof(struct node));

- La funzione free libera la memoria, ossia la memoria viene restituita al sistema: free(newPtr);